generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      Role     @default(NORMAL)
  email     String   @unique
  isNistian Boolean
  nistEmail String?  @unique
  roll      String?  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizzes      Quiz[]
  quizAttempts QuizAttempt[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quiz      Quiz[]
}

model Quiz {
  id           String   @id @default(uuid())
  title        String
  description  String?
  categoryName String
  // quiz status is not required in db.. who is going to update this .. needs a corn job if automated.. better if we logically find this out by start time and end time ( start time > now = upcomming, end time > now = ongoing, end time < now = completed)
  startTime    DateTime
  endTime      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category     Category      @relation(fields: [categoryName], references: [name])
  questions    Question[]
  quizAttempts QuizAttempt[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
}

model Topic {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Question Question[]
}

model Question {
  id String @id @default(uuid())

  quizId       String
  questionText String
  topicName    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz    Quiz     @relation(fields: [quizId], references: [id])
  topic   Topic    @relation(fields: [topicName], references: [name])
  options Option[]
  Answer  Answer[]
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  optionText String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
  Answer   Answer[]
}

model QuizAttempt {
  id           String        @id @default(uuid())
  userId       String
  quizId       String
  score        Int?
  startedAt    DateTime
  finishedAt   DateTime?
  status       AttemptStatus @default(IN_PROGRESS)
  isPlagiarism Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  answers Answer[]
}

model Answer {
  id               String   @id @default(uuid())
  quizAttemptId    String
  selectedOptionId String?
  questionId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  quizAttempt    QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  question       Question    @relation(fields: [questionId], references: [id])
  selectedOption Option?     @relation(fields: [selectedOptionId], references: [id])
}

enum Role {
  ADMIN
  NORMAL
}
// this is not required as we can calculate this by start time and end time
enum QuizStatus {
  UPCOMING
  ONGOING
  COMPLETED
}
// attempt status is relevent can be updated when caculating score 
enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  CANCELLED
}
